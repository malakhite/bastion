generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime @db.Timestamptz()
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime? @map("email_verified") @db.Timestamptz()
  image         String?
  active        Boolean   @default(false)
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime? @updatedAt @map("updated_at") @db.Timestamptz()
  accounts      Account[]
  posts         Post[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamptz()

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id          String    @id @default(cuid())
  slug        String    @unique
  title       String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String    @map("author_id")
  body        String
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  publishedAt DateTime? @map("published_at") @db.Timestamptz()
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("posts")
}
